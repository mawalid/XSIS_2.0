<style type="text/css">
    [data-validation-message] {
        display: none;
        color: red;
        font-weight: bold;
    }

        [data-validation-message].message-visible {
            display: block;
        }

    .blueborder {
        border-color: blue;
    }

        .blueborder.invalid {
            border-color: red;
        }
</style>
<style>
    .body {
        color: #000080;
    }
</style>
<form action="" method="post" id="idFrmEditOrganisasi" class="body">
    <div class="row">
        <div class="col-lg-6">
            <label>Nama Organisasi *</label>
            <input type="text" name="name" data-validate="required" class="form-control blueborder" id="idInpNamaOrganisasi">
            <input type="hidden" name="id" id="idget" />
            <small role="alert" aria-hidden="true" data-validation-message="required">Nama Organisasi Harus Diisi.</small>
        </div>

        <div class="col-lg-6">
            <label>Jabatan *</label>
            <input type="text" name="position" data-validate="required" class="form-control blueborder" id="idInpJabatan">
            <small role="alert" aria-hidden="true" data-validation-message="required">Jabatan Harus Diisi.</small>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6">
            <label>Tahun Masuk *</label>
            <select class="form-control blueborder" data-validate="required" name="entry_year" id="idInpTahunMasuk">
                <option value="">-Pilih-</option>
                @*<option value="2011">2011</option>
                <option value="2012">2012</option>
                <option value="2013">2013</option>
                <option value="2014">2014</option>
                <option value="2015">2015</option>*@
            </select>
            <small role="alert" aria-hidden="true" data-validation-message="required">Tanggal Masuk Harus Diisi.</small>
        </div>

        <div class="col-lg-6">
            <label>Tahun Keluar *</label>
            <select class="form-control blueborder" data-validate="required years" name="exit_year" id="idInpTahunKeluar">
                <option value="">-Pilih-</option>
                @*<option value="2011">2011</option>
                <option value="2012">2012</option>
                <option value="2013">2013</option>
                <option value="2014">2014</option>
                <option value="2015">2015</option>*@
            </select>
            <small role="alert" aria-hidden="true" data-validation-message="required">Tahun Keluar Harus Diisi.</small>
            <small role="alert" aria-hidden="true" data-validation-message="years">Tanggal Keluar Tidak Valid.</small>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <label>Tanggung Jawab</label>
            <input type="text" name="responsibility" class="form-control blueborder" id="idInpTanggungJawab">
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <label>Catatan</label>
            <textarea class="form-control blueborder" id="txtarea" name="notes"></textarea>
        </div>
    </div>

    <div class="row">
        <table align="right">
            <tr>
                <td colspan="1">
                    <div class="btn btn-group">
                        <button type="button" class="btn orenwoy" id="idBtnCancelOrganisasi">&nbsp;&nbsp;Batal&nbsp;&nbsp;</button>
                        <button type="submit" class="btn biruwoy" id="idBtnEditOrganisasi">Simpan</button>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</form>


<script>
    var d = new Date();
    $(document).ready(function () {
        var vEnterOption = "";
        var vExitOption = "";
        debugger;
        for (var i = d.getFullYear(); i > 1970; i--) {
            vEnterOption = vEnterOption +
                '<option>' + i + '</option>'
        }
        $('#idInpTahunMasuk').append(vEnterOption);

        for (var i = d.getFullYear(); i > 1970; i--) {
            vExitOption = vExitOption +
                '<option>' + i + '</option>'
        }
        $('#idInpTahunKeluar').append(vExitOption);

        $.ajax({
            url: '/Organisasi/AmbilData',
            data: { ID: $('#idget').val() },
            method: 'Get',
            success: function (mdl) {
                debugger;
                $('#idInpNamaOrganisasi').val(mdl.name);
                $('#idInpJabatan').val(mdl.position);
                $('#idInpTahunMasuk').val(mdl.entry_year).selected;
                $('#idInpTahunKeluar').val(mdl.exit_year).selected;
                $('#idInpTanggungJawab').val(mdl.responsibility);
                $('#txtarea').val(mdl.notes);
            },
            error: function (mdl) {
                debugger;
            }
        });


        $('#idBtnCancelOrganisasi').click(function () {
            $('#idMdlCreateOrganisasi').close;
            location.reload();
        });

    });
    //var d = new Date();
    //$("idInpTahunMasuk").click(function () {
    //    var vEnterOption = $('#idInpTahunMasuk').val();
    //    var vExitOption = "";
    //    for (var i = d.getFullYear() ; i >= 1970; i--) {
    //        vExitOption = vExitOption +
    //            '<option>' + i + '</option>'
    //    }
    //    $('#idInpTahunKeluar').empty(vExitOption);
    //    $('#idInpTahunKeluar').append(vExitOption);
    //});

    //$('#idBtnEditOrganisasi').click(function () {
    function editorganisasi() {
        debugger;
        var vDataBarang = $('#idFrmEditOrganisasi').serialize();
        $.ajax({
            url: '/Organisasi/EditSimpan',
            data: vDataBarang,
            method: 'Post',
            success: function (mdl) {
                if (mdl.EditSimpan == "Berhasil") {
                    debugger;
                    alert("Data berhasil diedit");
                    //
                    //
                    location.reload();
                    $('#idMdlEditOrganisasi').close;
                    
                }
                else {
                    debugger;
                    alert("Data gagal diedit");
                }
            },
            error: function (mdl) {
                debugger;
            }
        });
    }

</script>

<script>
// (1) Defining our validator-functions
//     for later use. They return
//     "true", if the validation passes.
const validators = {
  // Checks the field for emptiness.
    required: element => element.value.length > 0,
    years: element=>element.value>=document.getElementById("idInpTahunMasuk").value,

  // Checks if there are no numbers
  // in the field.
  noNumbers: element => !element.value.match(/[0-9]/g),

  // Checks if the value is shorter
  // than 10 characters.
  maxLength: element => element.value.length <= 10,

  // Checks if the checkbox is checked.
  mustBeChecked: element => element.checked
};

// (2) Check the contents of an input,
//     get all validators, and mark
//     the field in case of invalidity.
function validateElement(element) {
  resetValidation(element);

  // Store all validators from the
  // data-validate-attribute into
  // an array.
  const rules = element.dataset.validate.split(" ");

  // For every validator on the
  // field...
  rules.forEach(rule => {
    // ...find the corresponding
    // validator-function from our
    // object from #1 and call it
    // with the element as parameter.
    if (validators[rule](element)) {
      // If the function returns true, all is fine.
        debugger;
        return;
    } else {
      // If it returns false, the
      // validation failed.
      // In that case, the
      // markElementInvalid-function
      // takes care of showing the
      // error-message.
      markElementInvalid(element, rule);
    }
  });
}

// (3) Adds classes to an element,
//     so it appears invalid. Also
//     it picks the correct feedback-
//     message and sets it visible.
function markElementInvalid(element, validatorName) {
  element.classList.add("invalid");
  element.setAttribute("aria-invalid", true);
  const feedbackMessage = element.parentNode.querySelector(
    `[data-validation-message=${validatorName}]`
  );
  feedbackMessage.classList.add("message-visible");
  feedbackMessage.setAttribute("aria-hidden", false);
}

// (4) Removes all traces of
//     validation from an element,
//     like the error-messages and
//     the styling.
//     (Pretty much the opposite of #3)
function resetValidation(element) {
  element.classList.remove("invalid");
  element.setAttribute("aria-invalid", false);
  element.parentNode
    .querySelectorAll("[data-validation-message]")
    .forEach(e => {
      e.classList.remove("message-visible");
      e.setAttribute("aria-hidden", true);
    });
}

// (5) Store the form and its
//     inputs in variables.
const form = document.getElementById("idFrmEditOrganisasi");
const formElements = Array.from(form.elements);

// (6) Every input gets an
//     event-listener attached.
formElements.forEach(formElement => {
  // Do nothing if the element has
  // no data-validate-attribute.
  if (!formElement.dataset) return;
  if (!formElement.dataset.validate) return;

  // Attach the blur-event-listener
  // to the element.
  formElement.addEventListener("", () => {
    // This means, validateElement will
    // be called everytime the element
    // loses focus.
    validateElement(formElement);
  });
});

// (7) We're doing what we did at #3,
//     only on form-submit, and for
//     every field.
form.addEventListener("submit", event => {
  // Let's assume, everything is fine.
  let formIsValid = true;
  form.classList.remove("invalid");

  // We'll check every field in the form.
  // (same as #3)
  formElements.forEach(formElement => {
    if (!formElement.dataset) return;
    if (!formElement.dataset.validate) return;
    validateElement(formElement);
  });

  // If there are any "invalid"-classes
  // after we checked all fields, the form
  // is invalid...
  formIsValid = form.querySelectorAll(".invalid").length === 0;

  // ...and will not be submitted.
  if (formIsValid === false) {
    form.classList.add("invalid");
    event.preventDefault();
  } else {
      debugger;
      editorganisasi();
  }
});
</script>

