<style>
    .form-custom {
        border-color: #000080;
        border-width: 2px;
        height: 45px;
    }

    .name-clr {
        color: #000080;
        font-size: 10px;
    }

    [data-validation-message] {
        display: none;
        color: red;
        font-weight: bold;
    }

        [data-validation-message].message-visible {
            display: block;
        }

    .form-custom.invalid {
        border-color: red;
    }
</style>

<form action="" class="margin-set" method="post" id="idFrmSavePendidikan">

    <div class="row">
        <div class="col-lg-6">
            <label for="idSklhInstansi" class="name-clr">Nama Sekolah/Instansi*</label><br />
            <input type="text" name="school_name" data-validate="required" class="form-control form-custom" id="idSklhInstansi" placeholder="">
            <small role="alert"
                   aria-hidden="true"
                   data-validation-message="required">
                Nama Sekolah/Instansi Harus Diisi.
            </small>
        </div>

        <div class="col-lg-3">
            <label for="idKota" class="name-clr">Kota</label><br />
            <input type="text" name="city" class="form-control form-custom" id="idKota" placeholder="">
        </div>

        <div class="col-lg-3">
            <label for="idNegara" class="name-clr">Negara</label><br />
            <input type="text" name="country" class="form-control form-custom" id="idNegara" placeholder="">
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6">
            <label for="idJenjang" class="name-clr">Jenjang Pendidikan*</label><br />
            <select type="text" name="education_level_id" data-validate="required" class="form-control form-custom" id="idJenjang" placeholder="-Pilih-">
                @*<option value="">-Pilih-</option>
                    <option value="1">SD</option>
                    <option value="2">SMP</option>
                    <option value="3">SMA</option>
                    <option value="4">Sarjana</option>*@
            </select>
            <small role="alert"
                   aria-hidden="true"
                   data-validation-message="required">
                Jenjang Pendidikan Harus Diisi.
            </small>
        </div>

        <div class="col-lg-3">
            <label for="idThnMasuk" class="name-clr">Tahun Masuk</label><br />
            <select type="text" name="entry_year" class="form-control form-custom" id="idThnMasuk" placeholder="-Pilih-">
                <option>-Pilih Tahun-</option>
            </select>
        </div>

        <div class="col-lg-3">
            <label for="idThnLulus" class="name-clr">Tahun Lulus</label><br />
            <select type="text" name="graduation_year" data-validate="years" class="form-control form-custom" id="idThnLulus" placeholder="-Pilih-" disabled>
                <option>-Pilih-</option>
            </select>
            <small role="alert"
                   aria-hidden="true"
                   data-validation-message="years">
                Tahun Lulus tidak valid.
            </small>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-6">
            <label for="idJurusan" class="name-clr">Jurusan</label><br />
            <input type="text" name="major" class="form-control form-custom" id="idJurusan" placeholder="">
        </div>

        <div class="col-lg-6">
            <label for="idIPK" class="name-clr">IPK</label><br />
            <input type="text" name="gpa" class="form-control form-custom" id="idIPK" placeholder="">
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <label for="idCttn" class="name-clr">Catatan</label><br />
            <input type="hidden" name="biodata_id" class="form-control form-custom" id="idBiodataId" placeholder="">
            <textarea class="form-control form-custom col-md-12" id="idCttn" name="notes" style="height:100px;"></textarea><br />
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8"></div>
        <div class="col-lg-4 btn-group">
            <button type="button" class="btn btn-primary btn-lg" style="background-color: orangered;" id="idBtnBatal">&nbsp Batal &nbsp</button>
            <button type="submit" class="btn btn-primary btn-lg" id="idBtnSimpan">Simpan</button>
        </div>
    </div>

</form>

<script>

    var d = new Date();
    var vBiodataId = 2;
    $(document).ready(function () {
        debugger;
        // memunculkan opsi jenjang pendidikan
        var vSelect = '<option value="">' + "-Pilih Jenjang-" + '</option>';
        $.ajax({
            url: '/RiwayatPendidikan/Select',
            method: 'Get',
            success: function (mdl) {
                debugger;
                $.each(mdl, function (i, d) { //menjahit data ke dalam tabel
                    vSelect = vSelect +
                        '<option value="' + d.id + '">' +
                            d.name +
                            '</option>';
                });
                $('#idJenjang').append(vSelect); //memasukan data yg sudah di jahit ke dalam body
            },
            error: function (mdl) {
                debugger;
            }
        });

        // memunculkan opsi tahun masuk
        var vOption = "";
        for (var i = d.getFullYear(); i >= 1980; i--) {
            vOption = vOption +
            '<option>' + i + '</option>'
        }

        $('#idThnMasuk').append(vOption);

        //memunculkan opsi tahun lulus
        $('#idThnMasuk').click(function () {
            document.getElementById("idThnLulus").disabled = false;
            var vEnterOpt = $('#idThnMasuk').val();
            var vGradOption = '<option value="">' + "-Pilih Tahun-" + '</option>';
            for (var i = d.getFullYear()+5 ; i >= vEnterOpt; i--) {
                vGradOption = vGradOption +
                '<option>' + i + '</option>'
            }

            $('#idThnLulus').empty();
            $('#idThnLulus').append(vGradOption);


        });
        //memasukkan biodata_id
        $('#idBiodataId').val(vBiodataId);
        debugger;
    });

    $('#idBtnBatal').click(function () {
        debugger;
        $('#idMdlTambahPendidikan').modal('hide');
        location.reload();
        $('#myModal').modal('show');
    });

    function simpanpendidikan() {
        var vTmbhPendidikan = $('#idFrmSavePendidikan').serialize();
        debugger;
        $.ajax({
            url: '/RiwayatPendidikan/Save',
            data: vTmbhPendidikan,
            method: 'Post',
            success: function (mdl) {
                debugger;
                if (mdl.Simpan == "Berhasil") {
                    debugger;
                    alert("Data berhasil disimpan");
                    $('#idMdlTambahPendidikan').close;
                    location.reload();
                    $('#myModal').modal('show');
                }
                else {
                    debugger;
                    alert("Data gagal disimpan");
                }
            }
        });
    }
</script>


<script>
// (1) Defining our validator-functions for later use. They return "true", if the validation passes.
    const validators = {

        required: element => element.value.length > 0, // Checks the field for emptiness.
        noNumbers: element => !element.value.match(/[0-9]/g), // Checks if there are no numbers in the field.
        maxLength: element => element.value.length <= 10, // Checks if the value is shorter than 10 characters.
        years: element => element.value >= document.getElementById("idThnMasuk").value,
        mustBeChecked: element => element.checked  // Checks if the checkbox is checked.
};

// (2) Check the contents of an input, get all validators, and mark the field in case of invalidity.
function validateElement(element) {

    resetValidation(element);
    const rules = element.dataset.validate.split(" "); // Store all validators from the data-validate-attribute into an array.

    rules.forEach(rule => { // For every validator on the field...
        if (validators[rule](element)) { // ...find the corresponding validator-function from our object from #1 and call it with the element as parameter.
            debugger; // If the function returns true, all is fine.
        return;
        }
        else {
            markElementInvalid(element, rule); // If it returns false, the validation failed. In that case, the markElementInvalid-function takes care of showing the error-message.
        }
  });
}

// (3) Adds classes to an element, so it appears invalid. Also it picks the correct feedback-message and sets it visible.
function markElementInvalid(element, validatorName) {
  element.classList.add("invalid");
  element.setAttribute("aria-invalid", true);

  const feedbackMessage = element.parentNode.querySelector(
    `[data-validation-message=${validatorName}]`);
  feedbackMessage.classList.add("message-visible");
  feedbackMessage.setAttribute("aria-hidden", false);
}

// (4) Removes all traces of validation from an element, like the error-messages and the styling. (Pretty much the opposite of #3)
function resetValidation(element) {
  element.classList.remove("invalid");
  element.setAttribute("aria-invalid", false);
  element.parentNode
    .querySelectorAll("[data-validation-message]")
    .forEach(e => {
      e.classList.remove("message-visible");
      e.setAttribute("aria-hidden", true);
    });
}

// (5) Store the form and its inputs in variables.
const form = document.getElementById("idFrmSavePendidikan");
const formElements = Array.from(form.elements);

// (6) Every input gets an event-listener attached.
formElements.forEach(formElement => {
  // Do nothing if the element has no data-validate-attribute.
  if (!formElement.dataset) return;
  if (!formElement.dataset.validate) return;
  // Attach the blur-event-listener to the element.
formElement.addEventListener("", () => {
    validateElement(formElement); // This means, validateElement will be called everytime the element loses focus.
  });
});

// (7) We're doing what we did at #3, only on form-submit, and for every field.
    form.addEventListener("submit", event =>{
    let formIsValid = true; // Let's assume, everything is fine.
    form.classList.remove("invalid");
  debugger;
  // We'll check every field in the form. (same as #3)
  formElements.forEach(formElement => {
    if (!formElement.dataset) return;
    if (!formElement.dataset.validate) return;
    validateElement(formElement);
  });

  formIsValid = form.querySelectorAll(".invalid").length === 0;  // If there are any "invalid"-classes after we checked all fields, the form is invalid...
  if (formIsValid === false) {
      form.classList.add("invalid"); // ...and will not be submitted.
      event.preventDefault();
  }
  else {
      debugger;
      simpanpendidikan();
  }
  });
</script>

